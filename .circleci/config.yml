# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
# １ circleciのサイトに行き、githubで認証
# ２ vuequiz（プロジェクト直下）に.circleciディレクトリを生成
# ３ .circleci直下にconfig.ymlファイルを生成
# ４ config/database.phpにテストデータ用設定を書く

# CircleCIのバージョンを指定する
version: 2
orbs:
  aws-ecr: circleci/aws-ecr@6.5.0
  aws-ecs: circleci/aws-ecs@0.0.10
jobs:
  build:
    # CI環境で利用するDockerコンテナあるいはVMのイメージを指定する。
    # docker / machine / macos のいずれかをconfig.ymlに記載する必要がある。
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-node-browsers
      - image: circleci/node:7.10-browsers
      - image: selenium/standalone-chrome

    environment:
      - APP_DEBUG: true
      - APP_ENV: testing
      - APP_KEY: base64:YlIJx6uH3OUb3hxN+PAiJKlC+EGZ2KYi8VHxsfdJpLk=
      - APP_URL: http://localhost:8888

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - setup_remote_docker

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip
      - run:
          name: run selenium
          command: docker run -d -p 4444:4444 selenium/standalone-chrome
      # composer.jsonで  "laravel/dusk"を"dont-discover"に書く
      - run: composer install -n --prefer-dist
      - run:
          name: install-npm
          command: npm install

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules
      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit

      # sshでec2インスタンス内に入って
      # git fetch origin masterとgit reset --hard origin/masterしとけば
      # awsで上げたアプリの中身は更新される　自動化したいなぁ
      - run: ./vendor/bin/phpunit
      - run:
          name: Running server
          command: php artisan serve
          background: true

      - run:
          name: Run Dusk
          command: APP_URL=http://127.0.0.1:8000 php artisan dusk

  build_image:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-node-browsers
      - image: docker:19.03

    environment:
      - APP_DEBUG: true
      - APP_ENV: testing
      - APP_KEY: base64:YlIJx6uH3OUb3hxN+PAiJKlC+EGZ2KYi8VHxsfdJpLk=
      - APP_URL: http://localhost:8888

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: install aws cli
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: build image
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
            docker build -f ./docker/php/Dockerfile -t ${ECR_DOMAIN_APP}:$CIRCLE_SHA1 -t ${ECR_DOMAIN_APP}:latest .
            docker build -f ./docker/nginx/Dockerfile -t ${ECR_DOMAIN_NGINX}:$CIRCLE_SHA1 -t ${ECR_DOMAIN_NGINX}:latest  .
      - run:
          name: Push docker image
          command: |
            docker push ${ECR_DOMAIN_APP}:$CIRCLE_SHA1
            docker push ${ECR_DOMAIN_APP}:latest
            docker push ${ECR_DOMAIN_NGINX}:$CIRCLE_SHA1
            docker push ${ECR_DOMAIN_NGINX}:latest
workflows:
  version: 2
  test:
    jobs:
      - aws-ecr/build-and-push-image:
        region: ap-northeast-1
        account-url: AWS_ECR_ACCOUNT_URL
        repo: 'WikiForLearningEnglish'　# GitHubのリポジトリ名
        tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update:
          requires:
             - aws-ecr/build-and-push-image
                 family: 'example'　# ECSのタスク定義名
                 cluster-name: 'example'　# ECSクラスター名
                 service-name: 'example'　# ECSのサービス名
                 container-image-name-updates: 'example'　# タスク定義で指定しているコンテナ名
      - build
      - build_image:
          # buildができたらbuild_image起動
          # masterブランチでのみbuild_image起動
          #filters:
            #branches:
              #only: master
